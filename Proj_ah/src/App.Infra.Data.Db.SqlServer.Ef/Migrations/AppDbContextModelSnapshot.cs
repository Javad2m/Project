// <auto-generated />
using System;
using App.Infra.Data.Db.SqlServer.Ef.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.Db.SqlServer.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Wallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = 1,
                            CreatedAt = new DateTime(2025, 2, 14, 10, 37, 17, 849, DateTimeKind.Local).AddTicks(4321),
                            Email = "Admin@gmail.com",
                            FirstName = "Javad",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Moradi",
                            Wallet = 100.5m
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62c52fac-4bc3-47ec-9c63-ec4f582d186c",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI6IJjCz2LAZYJNusNu2APyeTeVTVizwMiY5gZDTteUwJMjX4hXKGSKoFMhQw9jhXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b91b4de7-ab64-42f2-a5b1-1fa3a9525e3f",
                            TwoFactorEnabled = false,
                            UserName = "Admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca67a02c-0e0d-42a5-a743-875ce378e308",
                            Email = "Javad@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JAVAD@GMAIL.COM",
                            NormalizedUserName = "JAVAD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHCdfk44tZXQ59TgH3yMh2ZRbXRuAQOTs4lluHi/WQhhVz6pSLlwlOXeP+ppsM0DLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10b19a55-7b10-45b2-b02e-4c3a5e5d570e",
                            TwoFactorEnabled = false,
                            UserName = "Javad@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e365a241-0db6-4a65-a03c-c2dbebd1554f",
                            Email = "Ali@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALI@GMAIL.COM",
                            NormalizedUserName = "ALI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEGlrO/2riHuqYSKkh9WM4YRCHqgP90g9tc/iqPmJOpk+S0ymMbwd++wnDlDVROPTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be73f1ea-9583-4e00-8576-d376741c5d56",
                            TwoFactorEnabled = false,
                            UserName = "Ali@gmail.com"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 7,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 8,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 9,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 10,
                            Title = "اراک"
                        },
                        new
                        {
                            Id = 11,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 13,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 14,
                            Title = "رشت"
                        },
                        new
                        {
                            Id = 15,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 18,
                            Title = "شاهرود"
                        },
                        new
                        {
                            Id = 19,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 20,
                            Title = "خرم‌آباد"
                        },
                        new
                        {
                            Id = 21,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 22,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 23,
                            Title = "ماهشهر"
                        },
                        new
                        {
                            Id = 24,
                            Title = "بابل"
                        },
                        new
                        {
                            Id = 25,
                            Title = "زنجان"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 851, DateTimeKind.Local).AddTicks(5147),
                            ImagePath = "\\Images\\icon\\tamiz.png",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "تمیز کاری"
                        },
                        new
                        {
                            Id = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 851, DateTimeKind.Local).AddTicks(5387),
                            ImagePath = "\\Images\\icon\\sakhteman.png",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 851, DateTimeKind.Local).AddTicks(5389),
                            ImagePath = "\\Images\\icon\\ashya.png",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 851, DateTimeKind.Local).AddTicks(5390),
                            ImagePath = "\\Images\\icon\\asbabkeshi.png",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "اسباب کشی و حمل بار"
                        },
                        new
                        {
                            Id = 5,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 851, DateTimeKind.Local).AddTicks(5392),
                            ImagePath = "\\Images\\icon\\khodro.png",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 6,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 851, DateTimeKind.Local).AddTicks(5393),
                            ImagePath = "\\Images\\icon\\zibaii.png",
                            IsActive = true,
                            IsDeleted = false,
                            Title = "سلامت و زیبایی"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("Wallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("CityId1");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = 2,
                            CityId = 1,
                            CreatedAt = new DateTime(2025, 2, 14, 10, 37, 17, 862, DateTimeKind.Local).AddTicks(3691),
                            FirstName = "Javad",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Sadeghi",
                            Mail = "Javad@gmail.com",
                            Wallet = 0m
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("Wallet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("CityId1");

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = 3,
                            CityId = 1,
                            CreatedAt = new DateTime(2025, 2, 14, 10, 37, 17, 866, DateTimeKind.Local).AddTicks(8495),
                            Description = "Expert in web development and software architecture.",
                            Email = "Ali@gmail.com",
                            FirstName = "Ali",
                            Gender = 1,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Abd",
                            Wallet = 0m
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("DoneTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceSubCategoryId1")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("ServiceSubCategoryId");

                    b.HasIndex("ServiceSubCategoryId1");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.ServiceSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ServiceSubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8253),
                            ImagePath = "\\Images\\services\\1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "خدمات نظافت و منزل"
                        },
                        new
                        {
                            Id = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8464),
                            ImagePath = "\\Images\\services\\2.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس ویژه نظافت"
                        },
                        new
                        {
                            Id = 3,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8465),
                            ImagePath = "\\Images\\services\\3.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس لوکس نظافت"
                        },
                        new
                        {
                            Id = 4,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8467),
                            ImagePath = "\\Images\\services\\4.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "نظافت راه پله"
                        },
                        new
                        {
                            Id = 5,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8468),
                            ImagePath = "\\Images\\services\\5.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سرویس نظافت فوری"
                        },
                        new
                        {
                            Id = 6,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8469),
                            ImagePath = "\\Images\\services\\6.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "پذیرایی"
                        },
                        new
                        {
                            Id = 7,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8470),
                            ImagePath = "\\Images\\services\\7.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "کارگر ساده"
                        },
                        new
                        {
                            Id = 8,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8471),
                            ImagePath = "\\Images\\services\\8.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 1,
                            Title = "سمپاشی فضای داخلی"
                        },
                        new
                        {
                            Id = 9,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8472),
                            ImagePath = "\\Images\\services\\9.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "شستشو در محل"
                        },
                        new
                        {
                            Id = 10,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8473),
                            ImagePath = "\\Images\\services\\10.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "قالیشویی"
                        },
                        new
                        {
                            Id = 11,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8474),
                            ImagePath = "\\Images\\services\\11.png",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "خشکشویی"
                        },
                        new
                        {
                            Id = 12,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8476),
                            ImagePath = "\\Images\\services\\12.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 2,
                            Title = "پرده شویی"
                        },
                        new
                        {
                            Id = 13,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8477),
                            ImagePath = "\\Images\\services\\13.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "کارواش سیار"
                        },
                        new
                        {
                            Id = 14,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8478),
                            ImagePath = "\\Images\\services\\14.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "سرامیک خودرو"
                        },
                        new
                        {
                            Id = 15,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8479),
                            ImagePath = "\\Images\\services\\15.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 3,
                            Title = "موتورشویی خودرو"
                        },
                        new
                        {
                            Id = 16,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8480),
                            ImagePath = "\\Images\\services\\16.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 4,
                            Title = "تعمیر و سرویس پکیج"
                        },
                        new
                        {
                            Id = 17,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8491),
                            ImagePath = "\\Images\\services\\17.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 4,
                            Title = "تعمیر و سرویس آبگرم کن"
                        },
                        new
                        {
                            Id = 18,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8492),
                            ImagePath = "\\Images\\services\\18.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 4,
                            Title = "نصب و تعمیر شوفاژ"
                        },
                        new
                        {
                            Id = 19,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8493),
                            ImagePath = "\\Images\\services\\19.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 4,
                            Title = "تعمیر و نگهداری موتورخانه"
                        },
                        new
                        {
                            Id = 20,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8494),
                            ImagePath = "\\Images\\services\\20.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "سنگ کاری"
                        },
                        new
                        {
                            Id = 21,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8495),
                            ImagePath = "\\Images\\services\\21.jpeg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "نقاشی ساختمان"
                        },
                        new
                        {
                            Id = 22,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8496),
                            ImagePath = "\\Images\\services\\22.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "نصب کاغذ دیواری"
                        },
                        new
                        {
                            Id = 23,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8497),
                            ImagePath = "\\Images\\services\\23.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "ساخت و نصب توری"
                        },
                        new
                        {
                            Id = 24,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8498),
                            ImagePath = "\\Images\\services\\24.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "بنایی"
                        },
                        new
                        {
                            Id = 25,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8500),
                            ImagePath = "\\Images\\services\\25.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "کلید سازی"
                        },
                        new
                        {
                            Id = 26,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8501),
                            ImagePath = "\\Images\\services\\26.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 5,
                            Title = "دریل کاری"
                        },
                        new
                        {
                            Id = 27,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8502),
                            ImagePath = "\\Images\\services\\27.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 6,
                            Title = "خدمات لوله کشی ساختمان"
                        },
                        new
                        {
                            Id = 28,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8503),
                            ImagePath = "\\Images\\services\\28.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 6,
                            Title = "پمپ و منبع آب"
                        },
                        new
                        {
                            Id = 29,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8504),
                            ImagePath = "\\Images\\services\\29.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 6,
                            Title = "لوله کشی گاز"
                        },
                        new
                        {
                            Id = 30,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8505),
                            ImagePath = "\\Images\\services\\30.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 6,
                            Title = "نصب و تعمیر وال هنگ"
                        },
                        new
                        {
                            Id = 31,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8506),
                            ImagePath = "\\Images\\services\\31.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 7,
                            Title = "خدمات بازسازی خانه"
                        },
                        new
                        {
                            Id = 32,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8507),
                            ImagePath = "\\Images\\services\\32.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 7,
                            Title = "مشاوره و بازسازی خانه"
                        },
                        new
                        {
                            Id = 33,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8509),
                            ImagePath = "\\Images\\services\\33.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 7,
                            Title = "دکوراسیون و طراحی ساختمان"
                        },
                        new
                        {
                            Id = 34,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8510),
                            ImagePath = "\\Images\\services\\34.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 8,
                            Title = "سیم کشی و کابل کشی"
                        },
                        new
                        {
                            Id = 35,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8518),
                            ImagePath = "\\Images\\services\\35.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 8,
                            Title = "رفع اتصالی"
                        },
                        new
                        {
                            Id = 36,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8519),
                            ImagePath = "\\Images\\services\\36.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 8,
                            Title = "نصب لوستر و چراغ"
                        },
                        new
                        {
                            Id = 37,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8520),
                            ImagePath = "\\Images\\services\\37.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 8,
                            Title = "کلید و پریز"
                        },
                        new
                        {
                            Id = 38,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8522),
                            ImagePath = "\\Images\\services\\38.png",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 8,
                            Title = "نصب و تعویز فیوز"
                        },
                        new
                        {
                            Id = 39,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8523),
                            ImagePath = "\\Images\\services\\39.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 8,
                            Title = "نصب و تعمیر کرکره برقی"
                        },
                        new
                        {
                            Id = 40,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8524),
                            ImagePath = "\\Images\\services\\40.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 9,
                            Title = "نجاری"
                        },
                        new
                        {
                            Id = 41,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8525),
                            ImagePath = "\\Images\\services\\41.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 9,
                            Title = "تعمیرات مبلمان"
                        },
                        new
                        {
                            Id = 42,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8526),
                            ImagePath = "\\Images\\services\\42.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 9,
                            Title = "خدمات درب چوبی و ضدسرقت"
                        },
                        new
                        {
                            Id = 43,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8527),
                            ImagePath = "\\Images\\services\\43.png",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 10,
                            Title = "پارتیشن شیشه ای"
                        },
                        new
                        {
                            Id = 44,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8528),
                            ImagePath = "\\Images\\services\\44.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 10,
                            Title = "شیشه بری و آینه کاری"
                        },
                        new
                        {
                            Id = 45,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8529),
                            ImagePath = "\\Images\\services\\45.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 10,
                            Title = "هندریل شیشه ای"
                        },
                        new
                        {
                            Id = 46,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8531),
                            ImagePath = "\\Images\\services\\46.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 10,
                            Title = "شیشه ریلی اسلاید"
                        },
                        new
                        {
                            Id = 47,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8532),
                            ImagePath = "\\Images\\services\\47.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 11,
                            Title = "خدمات باغبانی"
                        },
                        new
                        {
                            Id = 48,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8533),
                            ImagePath = "\\Images\\services\\48.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 11,
                            Title = "کاشت و تعویض گلدان"
                        },
                        new
                        {
                            Id = 49,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8534),
                            ImagePath = "\\Images\\services\\49.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 11,
                            Title = "مشاوره گل و گیاه"
                        },
                        new
                        {
                            Id = 50,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8535),
                            ImagePath = "\\Images\\services\\50.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 12,
                            Title = "تعمیر جارو برقی"
                        },
                        new
                        {
                            Id = 51,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8536),
                            ImagePath = "\\Images\\services\\51.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 12,
                            Title = "تعمیر چرخ خیاطی"
                        },
                        new
                        {
                            Id = 52,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8537),
                            ImagePath = "\\Images\\services\\52.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 12,
                            Title = "تعمیر پنکه"
                        },
                        new
                        {
                            Id = 53,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8545),
                            ImagePath = "\\Images\\services\\53.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 13,
                            Title = "تعمیر کامپیوتر و لپ تاب"
                        },
                        new
                        {
                            Id = 54,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8547),
                            ImagePath = "\\Images\\services\\54.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 13,
                            Title = "تعمیر ماشین های اداری"
                        },
                        new
                        {
                            Id = 55,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8548),
                            ImagePath = "\\Images\\services\\55.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 13,
                            Title = "مودم و اینترنت"
                        },
                        new
                        {
                            Id = 56,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8549),
                            ImagePath = "\\Images\\services\\56.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 14,
                            Title = "خدمات نرم افزاری"
                        },
                        new
                        {
                            Id = 57,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8550),
                            ImagePath = "\\Images\\services\\57.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 14,
                            Title = "خدمات باتری"
                        },
                        new
                        {
                            Id = 58,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8551),
                            ImagePath = "\\Images\\services\\58.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 14,
                            Title = "خدمات دوربین"
                        },
                        new
                        {
                            Id = 59,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8552),
                            ImagePath = "\\Images\\services\\59.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 15,
                            Title = "خدمات اسباب کشی"
                        },
                        new
                        {
                            Id = 60,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8553),
                            ImagePath = "\\Images\\services\\60.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 15,
                            Title = "سرویس بسته بندی"
                        },
                        new
                        {
                            Id = 61,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8555),
                            ImagePath = "\\Images\\services\\61.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 15,
                            Title = "کارگر جابه جایی"
                        },
                        new
                        {
                            Id = 62,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8556),
                            ImagePath = "\\Images\\services\\62.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 15,
                            Title = "اجاره انبار و سوله"
                        },
                        new
                        {
                            Id = 63,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8557),
                            ImagePath = "\\Images\\services\\63.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 16,
                            Title = "خدمات خودرو"
                        },
                        new
                        {
                            Id = 64,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8558),
                            ImagePath = "\\Images\\services\\64.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 16,
                            Title = "باتری به باتری"
                        },
                        new
                        {
                            Id = 65,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8559),
                            ImagePath = "\\Images\\services\\65.png",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 16,
                            Title = "امداد خودرو"
                        },
                        new
                        {
                            Id = 66,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8560),
                            ImagePath = "\\Images\\services\\66.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 16,
                            Title = "حمل خودرو"
                        },
                        new
                        {
                            Id = 67,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8561),
                            ImagePath = "\\Images\\services\\67.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 17,
                            Title = "کارواش سیار"
                        },
                        new
                        {
                            Id = 68,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8562),
                            ImagePath = "\\Images\\services\\68.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 17,
                            Title = "کارواش نانو"
                        },
                        new
                        {
                            Id = 69,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8563),
                            ImagePath = "\\Images\\services\\69.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 17,
                            Title = "موتورشویی خودرو"
                        },
                        new
                        {
                            Id = 70,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8564),
                            ImagePath = "\\Images\\services\\70.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 17,
                            Title = "احیای رنگ"
                        },
                        new
                        {
                            Id = 71,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8565),
                            ImagePath = "\\Images\\services\\71.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 18,
                            Title = "خدمات ناخن"
                        },
                        new
                        {
                            Id = 72,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8567),
                            ImagePath = "\\Images\\services\\72.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 18,
                            Title = "رنگ مو بانوان"
                        },
                        new
                        {
                            Id = 73,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8568),
                            ImagePath = "\\Images\\services\\73.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 18,
                            Title = "براشینگ مو"
                        },
                        new
                        {
                            Id = 74,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8569),
                            ImagePath = "\\Images\\services\\74.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 18,
                            Title = "کوتاهی مو بانوان"
                        },
                        new
                        {
                            Id = 75,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8570),
                            ImagePath = "\\Images\\services\\75.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 19,
                            Title = "مراقبت و نگهداری"
                        },
                        new
                        {
                            Id = 76,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8571),
                            ImagePath = "\\Images\\services\\76.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 19,
                            Title = "معاینه پزشکی"
                        },
                        new
                        {
                            Id = 77,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8572),
                            ImagePath = "\\Images\\services\\77.webp",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 19,
                            Title = "پیراپزشکی"
                        },
                        new
                        {
                            Id = 78,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8573),
                            ImagePath = "\\Images\\services\\78.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 20,
                            Title = "هتل های حیوانات خانگی"
                        },
                        new
                        {
                            Id = 79,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8574),
                            ImagePath = "\\Images\\services\\79.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 20,
                            Title = "خدمات دامپزشکی در محل"
                        },
                        new
                        {
                            Id = 80,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 873, DateTimeKind.Local).AddTicks(8575),
                            ImagePath = "\\Images\\services\\80.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            SubCategoryId = 20,
                            Title = "خدمات شستشو و آراش حیوانات خانگی"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(507),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(618),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(620),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(621),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(622),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(623),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(624),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "طراحی و بازسازی ساختمان"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(625),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "برقکاری"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(626),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "چوب و کابینت"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(627),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "خدمات شیشه ای ساختمان"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(628),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "باغبانی و فضای سبز"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(629),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "نصب و تعمیر لوازم خانگی"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(630),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "خدمات کامپیوتری"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(631),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(632),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "باربری و جابجایی"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 5,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(633),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "خدمات و تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(634),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(635),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "زیبایی بانوان"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(636),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "پزشکی و پرستاری"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 6,
                            CreatAt = new DateTime(2025, 2, 14, 10, 37, 17, 875, DateTimeKind.Local).AddTicks(637),
                            IsActive = true,
                            IsDeleted = false,
                            Title = "حیوانات خانگی"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripsion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuggestedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SuggestedDo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("ExpertServiceSubCategory", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("ExpertServiceSubCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert",
                            NormalizedName = "Expert"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Admin", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("App.Domain.Core.Entities.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntities.Image", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Request", "Request")
                        .WithMany("Images")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Comment", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Expert", "Expert")
                        .WithMany()
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Customer", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("App.Domain.Core.Entities.Customer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.BaseEntities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("App.Domain.Core.Entities.BaseEntities.City", null)
                        .WithMany("Customers")
                        .HasForeignKey("CityId1");

                    b.Navigation("ApplicationUser");

                    b.Navigation("City");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Expert", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Expert")
                        .HasForeignKey("App.Domain.Core.Entities.Expert", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.BaseEntities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("App.Domain.Core.Entities.BaseEntities.City", null)
                        .WithMany("Experts")
                        .HasForeignKey("CityId1");

                    b.Navigation("ApplicationUser");

                    b.Navigation("City");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Request", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Customer", null)
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("App.Domain.Core.Entities.ServiceSubCategory", "ServiceSubCategory")
                        .WithMany()
                        .HasForeignKey("ServiceSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.ServiceSubCategory", null)
                        .WithMany("Requests")
                        .HasForeignKey("ServiceSubCategoryId1");

                    b.Navigation("Customer");

                    b.Navigation("ServiceSubCategory");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.ServiceSubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.SubCategory", "SubCategory")
                        .WithMany("ServiceSubCategories")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.SubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Suggestion", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Expert", "Expert")
                        .WithMany("Suggestions")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Request", "Request")
                        .WithMany("Suggestions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("ExpertServiceSubCategory", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.ServiceSubCategory", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.BaseEntities.City", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Experts");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Expert", b =>
                {
                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Request", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.ServiceSubCategory", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.SubCategory", b =>
                {
                    b.Navigation("ServiceSubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
